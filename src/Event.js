/**
 *  @requires javelin-install
 *  @provides javelin-event
 *   @javelin
 */

/**
 *  A generic event, routable by :JX.Stratcom. All events within Javelin are
 *  represented by an :JX.Event, regardless of whether they originate from
 *  a native DOM event or are raw invoked events.
 *
 *  Events have a propagation model similar to native Javascript events, in that
 *  they can be stopped (which stops them from continuing to propagate to
 *  other handlers) or prevented (which prevents them from taking their default
 *  action, e.g. following a link). You can do both at once kill().
 *
 *  @author epriestley
 */
JX.install('Event', {
  members : {


    /**
     *  Stop an event from continuing to propagate. No other handler will
     *  receive this event. See ""Using Events"".
     *
     *  @return this
     *  @author epriestley
     */
    stop : function() {
      var r = this.getRawEvent();
      if (r) {
        r.cancelBubble = true;
        r.stopPropagation && r.stopPropagation();
      }
      this.setStopped(true);
      return this;
    },


    /**
     *  Prevent an event's default action.
     *
     *  @return this
     *  @author epriestley
     */
    prevent : function() {
      var r = this.getRawEvent();
      if (r) {
        r.returnValue = false;
        r.preventDefault && r.preventDefault();
      }
      this.setPrevented(true);
      return this;
    },


    /**
     *  Stop and prevent an event.
     *
     *  @return this
     *  @author epriestley
     */
    kill : function() {
      this.prevent();
      this.stop();
      return this;
    },


    /**
     *  Get the special (i.e., noncharacter) key, if any, associated with this
     *  event.
     */
    getSpecialKey : function() {
      var r = this.getRawEvent();
      if (!r || r.shiftKey) {
        return null;
      }

      var c = r.keyCode;
      do {
        c = JX.Event._keymap[c] || null;
      } while (c && JX.Event._keymap[c])

      return c;
    }
  },

  statics : {
    _keymap : {
      8     : 'delete',
      9     : 'tab',
      13    : 'return',
      27    : 'esc',
      37    : 'left',
      38    : 'up',
      39    : 'right',
      40    : 'down',
      63232 : 38,
      63233 : 40,
      62234 : 37,
      62235 : 39
    }
  },

  properties : {

    /**
     *  Native Javascript event which generated this JX.Event. Not every
     *  event is generated by a native event, so there may be no value in
     *  this field.
     */
    rawEvent : null,

    /**
     *  String describing the event type, like "click" or "mousedown". This
     *  may also be an application or object event.
     */
    type : null,

    /**
     *  If available, the DOM node where this event occurred. For example, if
     *  this event is a click on a button, the target will be the button which
     *  was clicked.
     */
    target : null,

    /**
     *  Map of event information. For application or object events, this is
     *  defined at invocation.
     *
     *  For native events, the DOM is walked from the event target to the root
     *  element. Each sigil which is encountered while walking up the tree is
     *  added to the map as a key. If the node has associated metainformation,
     *  it is set as the value; otherwise, the value is null.
     */
    data : null,

    /**
     *  Sigil path this event was activated from. TODO: explain this
     */
    path : [],

    /**
     *  True if propagation of the event has been stopped. See stop().
     */
    stopped : false,

    /**
     *  True if default behavior of the event has been prevented. See prevent().
     */
    prevented : false,

    nodes : {}
  },

  initialize : function() {
    if (__DEV__) {
      JX.Event.prototype.toString = function() {
        var path = '['+this.getPath().join(', ')+']';
        return 'Event<'+this.getType()+', '+path+', '+this.getTarget()+'>';
      }
    }
  }
});





